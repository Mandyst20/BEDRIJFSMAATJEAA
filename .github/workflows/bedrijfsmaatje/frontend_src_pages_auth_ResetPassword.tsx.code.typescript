import React, { useState, useEffect } from 'react';
import { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';
import {
  Box,
  TextField,
  Link,
  Typography,
  Container,
  InputAdornment,
  IconButton,
  Alert,
  Paper,
  CircularProgress,
} from '@mui/material';
import { LoadingButton } from '@mui/lab';
import { Visibility, VisibilityOff, Lock } from '@mui/icons-material';
import * as Yup from 'yup';
import { Formik, Form, Field, FieldProps } from 'formik';
import { useDispatch } from 'react-redux';
import { resetPassword, verifyResetToken } from '../../store/slices/authSlice';
import Logo from '../../components/common/Logo';
import AuthLayout from '../../layouts/AuthLayout';

interface ResetPasswordFormValues {
  password: string;
  confirmPassword: string;
}

const ResetPassword: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { token } = useParams<{ token: string }>();
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [resetStatus, setResetStatus] = useState<{ type: 'success' | 'error', message: string } | null>(null);
  const [isVerifying, setIsVerifying] = useState(true);
  const [isTokenValid, setIsTokenValid] = useState(false);

  useEffect(() => {
    const verifyToken = async () => {
      try {
        if (!token) {
          setResetStatus({
            type: 'error',
            message: 'Ongeldige of verlopen token.',
          });
          setIsTokenValid(false);
          return;
        }

        // Verify token validity
        await dispatch(verifyResetToken(token) as any);
        setIsTokenValid(true);
      } catch (error: any) {
        setResetStatus({
          type: 'error',
          message: error.message || 'Ongeldige of verlopen token.',
        });
        setIsTokenValid(false);
      } finally {
        setIsVerifying(false);
      }
    };

    verifyToken();
  }, [token, dispatch]);

  const initialValues: ResetPasswordFormValues = {
    password: '',
    confirmPassword: '',
  };

  const validationSchema = Yup.object({
    password: Yup.string()
      .min(8, 'Wachtwoord moet minimaal 8 tekens bevatten')
      .matches(
        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/,
        'Wachtwoord moet minimaal één hoofdletter, één kleine letter, één cijfer en één speciaal teken bevatten'
      )
      .required('Wachtwoord is verplicht'),
    confirmPassword: Yup.string()
      .oneOf([Yup.ref('password')], 'Wachtwoorden komen niet overeen')
      .required('Bevestig je wachtwoord'),
  });

  const handleSubmit = async (values: ResetPasswordFormValues, { setSubmitting }: any) => {
    try {
      setResetStatus(null);
      
      if (!token) {
        throw new Error('Ongeldige token');
      }

      // Dispatch reset password action
      await dispatch(resetPassword({
        token,
        password: values.password,
      }) as any);
      
      // Show success message
      setResetStatus({
        type: 'success',
        message: 'Je wachtwoord is succesvol gewijzigd. Je wordt doorgestuurd naar de inlogpagina.',
      });
      
      // Redirect to login after 3 seconds
      setTimeout(() => {
        navigate('/auth/login');
      }, 3000);
    } catch (error: any) {
      setResetStatus({
        type: 'error',
        message: error.message || 'Er is een fout opgetreden. Probeer het opnieuw.',
      });
      setSubmitting(false);
    }
  };

  const handleTogglePasswordVisibility = (field: 'password' | 'confirmPassword') => {
    if (field === 'password') {
      setShowPassword((prev) => !prev);
    } else {
      setShowConfirmPassword((prev) => !prev);
    }
  };

  if (isVerifying) {
    return (
      <AuthLayout>
        <Container component="main" maxWidth="sm">
          <Paper
            elevation={3}
            sx={{
              p: 4,
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              borderRadius: 2,
            }}
          >
            <Logo height={60} />
            <Box sx={{ mt: 4, mb: 4, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
              <CircularProgress />
              <Typography variant="body1" sx={{ mt: 2 }}>
                Token wordt geverifieerd...
              </Typography>
            </Box>
          </Paper>
        </Container>
      </AuthLayout>
    );
  }

  return (
    <AuthLayout>
      <Container component="main" maxWidth="sm">
        <Paper
          elevation={3}
          sx={{
            p: 4,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            borderRadius: 2,
          }}
        >
          <Box sx={{ mb: 3, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <Logo height={60} />
            <Typography component="h1" variant="h5" sx={{ mt: 2 }}>
              Wachtwoord resetten
            </Typography>
            {isTokenValid && (
              <Typography variant="body2" color="text.secondary" align="center" sx={{ mt: 1 }}>
                Voer je nieuwe wachtwoord in
              </Typography>
            )}
          </Box