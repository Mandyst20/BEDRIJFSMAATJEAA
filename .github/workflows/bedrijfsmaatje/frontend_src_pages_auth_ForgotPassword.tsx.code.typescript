import React, { useState } from 'react';
import { Link as RouterLink } from 'react-router-dom';
import {
  Box,
  TextField,
  Link,
  Typography,
  Container,
  InputAdornment,
  Alert,
  Paper,
} from '@mui/material';
import { LoadingButton } from '@mui/lab';
import { Email } from '@mui/icons-material';
import * as Yup from 'yup';
import { Formik, Form, Field, FieldProps } from 'formik';
import { useDispatch } from 'react-redux';
import { forgotPassword } from '../../store/slices/authSlice';
import Logo from '../../components/common/Logo';
import AuthLayout from '../../layouts/AuthLayout';

interface ForgotPasswordFormValues {
  email: string;
}

const ForgotPassword: React.FC = () => {
  const dispatch = useDispatch();
  const [resetStatus, setResetStatus] = useState<{ type: 'success' | 'error', message: string } | null>(null);

  const initialValues: ForgotPasswordFormValues = {
    email: '',
  };

  const validationSchema = Yup.object({
    email: Yup.string()
      .email('Ongeldig e-mailadres')
      .required('E-mailadres is verplicht'),
  });

  const handleSubmit = async (values: ForgotPasswordFormValues, { setSubmitting, resetForm }: any) => {
    try {
      setResetStatus(null);
      // Dispatch forgot password action
      await dispatch(forgotPassword(values.email) as any);
      
      // Show success message
      setResetStatus({
        type: 'success',
        message: 'Er is een e-mail verzonden met instructies om je wachtwoord te resetten.',
      });
      
      // Reset form
      resetForm();
    } catch (error: any) {
      setResetStatus({
        type: 'error',
        message: error.message || 'Er is een fout opgetreden. Probeer het opnieuw.',
      });
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <AuthLayout>
      <Container component="main" maxWidth="sm">
        <Paper
          elevation={3}
          sx={{
            p: 4,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            borderRadius: 2,
          }}
        >
          <Box sx={{ mb: 3, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
            <Logo height={60} />
            <Typography component="h1" variant="h5" sx={{ mt: 2 }}>
              Wachtwoord vergeten
            </Typography>
            <Typography variant="body2" color="text.secondary" align="center" sx={{ mt: 1 }}>
              Vul je e-mailadres in en we sturen je instructies om je wachtwoord te resetten
            </Typography>
          </Box>

          {resetStatus && (
            <Alert severity={resetStatus.type} sx={{ width: '100%', mb: 3 }}>
              {resetStatus.message}
            </Alert>
          )}

          <Formik
            initialValues={initialValues}
            validationSchema={validationSchema}
            onSubmit={handleSubmit}
          >
            {({ isSubmitting, touched, errors }) => (
              <Form style={{ width: '100%' }}>
                <Field name="email">
                  {({ field }: FieldProps) => (
                    <TextField
                      {...field}
                      margin="normal"
                      fullWidth
                      id="email"
                      label="E-mailadres"
                      autoComplete="email"
                      autoFocus
                      error={touched.email && Boolean(errors.email)}
                      helperText={touched.email && errors.email}
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <Email color="action" />
                          </InputAdornment>
                        ),
                      }}
                    />
                  )}
                </Field>

                <LoadingButton
                  type="submit"
                  fullWidth
                  variant="contained"
                  color="primary"
                  loading={isSubmitting}
                  sx={{ mt: 3, mb: 2, py: 1.5 }}
                >
                  Verstuur reset instructies
                </LoadingButton>

                <Box textAlign="center">
                  <Link component={RouterLink} to="/auth/login" variant="body2">
                    Terug naar inloggen
                  </Link>
                </Box>
              </Form>
            )}
          </Formik>
        </Paper>

        <Box mt={3}>
          <Typography variant="body2" color="text.secondary" align="center">
            Â© {new Date().getFullYear()} Bedrijfsmaatje. Alle rechten voorbehouden.
          </Typography>
        </Box>
      </Container>
    </AuthLayout>
  );
};

export default ForgotPassword;